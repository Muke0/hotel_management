/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-29 16:24:51
 *
 * FINE
 */

export enum MessageKind {
  Ping = 'Ping',
  Request = 'Request',
  Push = 'Push',
  Response = 'Response',
  Follow = 'Follow',
  Close = 'Close',
}

export type Headers = Record<string, string>;

export function Headers(): Headers {
  return Object.create(null);
}

export interface BaseMessage {
  kind: MessageKind;
}

export interface PingMessage extends BaseMessage {
  kind: MessageKind.Ping;
  messageId: number;
}

export function isPingMessage(
  message: STMPMessage | undefined | null,
): message is PingMessage {
  return message?.kind === MessageKind.Ping;
}

export type Payload = Uint8Array | string | undefined;

export function isPayload(data: unknown, allowEmpty = true): data is Payload {
  if (allowEmpty) {
    return (
      data === void 0 || typeof data === 'string' || data instanceof Uint8Array
    );
  }
  return typeof data === 'string' || data instanceof Uint8Array;
}

export interface PayloadMessage {
  headers: Headers;
  payload: Payload;
  fin: boolean;
  /** @internal */
  _buf?: Uint8Array[];
  /** @internal */
  _bufLength?: number;
}

export interface IncomeMessage extends BaseMessage, PayloadMessage {
  kind: MessageKind.Request | MessageKind.Push;
  messageId: number;
  action: string;
  payload: Payload;
}

export function isIncomeMessage(
  message: STMPMessage | undefined | null,
): message is IncomeMessage {
  return isRequestMessage(message) || isPushMessage(message);
}

export interface RequestMessage extends IncomeMessage {
  kind: MessageKind.Request;
}

export function isRequestMessage(
  message: STMPMessage | undefined | null,
): message is RequestMessage {
  return message?.kind === MessageKind.Request;
}

export interface PushMessage extends IncomeMessage {
  kind: MessageKind.Push;
}

export function isPushMessage(
  message: STMPMessage | undefined | null,
): message is PushMessage {
  return message?.kind === MessageKind.Push;
}

export interface ResponseMessage extends BaseMessage, PayloadMessage {
  kind: MessageKind.Response;
  messageId: number;
  status: number;
}

export function isResponseMessage(
  message: STMPMessage | undefined | null,
): message is ResponseMessage {
  return message?.kind === MessageKind.Response;
}

export interface CloseMessage extends BaseMessage {
  kind: MessageKind.Close;
  status: number;
  message: string;
}

export function isCloseMessage(
  message: STMPMessage | undefined | null,
): message is CloseMessage {
  return message?.kind === MessageKind.Close;
}

export interface FollowMessage extends BaseMessage {
  kind: MessageKind.Follow;
  messageId: number;
  payload: Payload;
  fin: boolean;
}

export function isFollowMessage(
  message: STMPMessage | undefined | null,
): message is FollowMessage {
  return message?.kind === MessageKind.Follow;
}

export type STMPMessage =
  | PingMessage
  | PushMessage
  | RequestMessage
  | ResponseMessage
  | CloseMessage
  | FollowMessage;

export type ExchangeMessage = IncomeMessage | ResponseMessage;

export function isExchangeMessage(
  message: STMPMessage | undefined | null,
): message is ExchangeMessage {
  return isIncomeMessage(message) || isResponseMessage(message);
}

export const STATUS_UNKNOWN = 0;

export const HTTP_OK = 200;
export const HTTP_BAD_REQUEST = 400;
export const HTTP_UNAUTHORIZED = 401;
export const HTTP_NOT_FOUND = 404;
export const HTTP_REQUEST_TIMEOUT = 408;
export const HTTP_INTERNAL_SERVER_ERROR = 500;

export const WS_NORMAL_CLOSURE = 1000;
export const WS_PROTOCOL_ERROR = 1002;
export const WS_ABNORMAL_CLOSURE = 1006;
export const WS_INTERNAL_ERROR = 1011;
export const WS_USER_MIN = 4000;

export function createPingMessage(messageId: number): PingMessage {
  return { kind: MessageKind.Ping, messageId };
}

export function createRequestMessage(
  messageId: number,
  action: string,
  payload: Payload,
  headers = Headers(),
  fin = true,
): RequestMessage {
  return {
    kind: MessageKind.Request,
    payload,
    messageId,
    action,
    headers,
    fin,
  };
}

export function createPushMessage(
  messageId: number,
  action: string,
  payload: Payload,
  headers = Headers(),
  fin = true,
): PushMessage {
  return {
    kind: MessageKind.Push,
    payload,
    messageId,
    action,
    headers,
    fin,
  };
}

export function createResponseMessage(
  messageId: number,
  status: number,
  payload: Payload,
  headers = Headers(),
  fin = true,
): ResponseMessage {
  return {
    kind: MessageKind.Response,
    payload,
    status,
    messageId,
    headers,
    fin,
  };
}

export function createCloseMessage(
  status: number,
  message: string,
): CloseMessage {
  return { kind: MessageKind.Close, message, status };
}

export function createFollowMessage(
  messageId: number,
  payload: Payload,
  fin = true,
): FollowMessage {
  return { kind: MessageKind.Follow, messageId, payload, fin };
}
