/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-29 16:24:51
 *
 * FINE
 */
export declare enum MessageKind {
    Ping = "Ping",
    Request = "Request",
    Push = "Push",
    Response = "Response",
    Follow = "Follow",
    Close = "Close"
}
export declare type Headers = Record<string, string>;
export declare function Headers(): Headers;
export interface BaseMessage {
    kind: MessageKind;
}
export interface PingMessage extends BaseMessage {
    kind: MessageKind.Ping;
    messageId: number;
}
export declare function isPingMessage(message: STMPMessage | undefined | null): message is PingMessage;
export declare type Payload = Uint8Array | string | undefined;
export declare function isPayload(data: unknown, allowEmpty?: boolean): data is Payload;
export interface PayloadMessage {
    headers: Headers;
    payload: Payload;
    fin: boolean;
}
export interface IncomeMessage extends BaseMessage, PayloadMessage {
    kind: MessageKind.Request | MessageKind.Push;
    messageId: number;
    action: string;
    payload: Payload;
}
export declare function isIncomeMessage(message: STMPMessage | undefined | null): message is IncomeMessage;
export interface RequestMessage extends IncomeMessage {
    kind: MessageKind.Request;
}
export declare function isRequestMessage(message: STMPMessage | undefined | null): message is RequestMessage;
export interface PushMessage extends IncomeMessage {
    kind: MessageKind.Push;
}
export declare function isPushMessage(message: STMPMessage | undefined | null): message is PushMessage;
export interface ResponseMessage extends BaseMessage, PayloadMessage {
    kind: MessageKind.Response;
    messageId: number;
    status: number;
}
export declare function isResponseMessage(message: STMPMessage | undefined | null): message is ResponseMessage;
export interface CloseMessage extends BaseMessage {
    kind: MessageKind.Close;
    status: number;
    message: string;
}
export declare function isCloseMessage(message: STMPMessage | undefined | null): message is CloseMessage;
export interface FollowMessage extends BaseMessage {
    kind: MessageKind.Follow;
    messageId: number;
    payload: Payload;
    fin: boolean;
}
export declare function isFollowMessage(message: STMPMessage | undefined | null): message is FollowMessage;
export declare type STMPMessage = PingMessage | PushMessage | RequestMessage | ResponseMessage | CloseMessage | FollowMessage;
export declare type ExchangeMessage = IncomeMessage | ResponseMessage;
export declare function isExchangeMessage(message: STMPMessage | undefined | null): message is ExchangeMessage;
export declare const STATUS_UNKNOWN = 0;
export declare const HTTP_OK = 200;
export declare const HTTP_BAD_REQUEST = 400;
export declare const HTTP_UNAUTHORIZED = 401;
export declare const HTTP_NOT_FOUND = 404;
export declare const HTTP_REQUEST_TIMEOUT = 408;
export declare const HTTP_INTERNAL_SERVER_ERROR = 500;
export declare const WS_NORMAL_CLOSURE = 1000;
export declare const WS_PROTOCOL_ERROR = 1002;
export declare const WS_ABNORMAL_CLOSURE = 1006;
export declare const WS_INTERNAL_ERROR = 1011;
export declare const WS_USER_MIN = 4000;
export declare function createPingMessage(messageId: number): PingMessage;
export declare function createRequestMessage(messageId: number, action: string, payload: Payload, headers?: Record<string, string>, fin?: boolean): RequestMessage;
export declare function createPushMessage(messageId: number, action: string, payload: Payload, headers?: Record<string, string>, fin?: boolean): PushMessage;
export declare function createResponseMessage(messageId: number, status: number, payload: Payload, headers?: Record<string, string>, fin?: boolean): ResponseMessage;
export declare function createCloseMessage(status: number, message: string): CloseMessage;
export declare function createFollowMessage(messageId: number, payload: Payload, fin?: boolean): FollowMessage;
