"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-29 16:49:10
 *
 * TODO
 */
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("./messages");
const STMPEncoding_1 = require("./STMPEncoding");
class STMPContext {
    constructor(message, instance) {
        this.instance = instance;
        this.incoming = message;
        this.outgoing = messages_1.createResponseMessage(message.messageId, 0, '');
    }
    isFinished() {
        return this.outgoing.status > 0;
    }
    get(key) {
        var _a;
        return _a = this.incoming.headers[key], (_a !== null && _a !== void 0 ? _a : this.instance.headers[key]);
    }
    sget(key) {
        var _a;
        return _a = this.outgoing.headers[key], (_a !== null && _a !== void 0 ? _a : this.instance.headers[key]);
    }
    set(key, value) {
        key = key.toLowerCase();
        if (this.instance.headers[key] !== value) {
            this.outgoing.headers[key] = value;
        }
        return this;
    }
    send() {
        if (messages_1.isRequestMessage(this.incoming)) {
            this.instance.send(this.outgoing);
        }
    }
    json(data, status = messages_1.HTTP_OK) {
        this.output(data, status, 'application/json');
    }
    text(text, status = messages_1.HTTP_OK) {
        this.output(text, status, 'text/plain');
    }
    raw(text, status = messages_1.HTTP_OK) {
        this.output(text, status, 'application/octet-stream');
    }
    output(payload, status = messages_1.HTTP_OK, contentType) {
        contentType = (contentType !== null && contentType !== void 0 ? contentType : this.sget('content-type'));
        if (!messages_1.isPayload(payload)) {
            const codec = STMPEncoding_1.STMPEncoding.get(contentType);
            if (!codec) {
                throw new TypeError(`cannot find codec for content type "${contentType}"`);
            }
            payload = codec.encodeRes(payload, this);
        }
        this.set('content-type', contentType);
        this.outgoing.payload = payload;
        this.outgoing.status = status;
        this.send();
    }
}
exports.STMPContext = STMPContext;
//# sourceMappingURL=STMPContext.js.map