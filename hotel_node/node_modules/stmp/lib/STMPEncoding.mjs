/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-12-18 11:38:40
 */
import { __values } from "tslib";
import { isArbitraryCodec } from './codec/arbitrary';
import { jsonCodec } from './codec/json';
function normalizeCodec(c) {
    if (isArbitraryCodec(c)) {
        return Object.assign(c, {
            encodeReq: c.encode,
            encodeRes: c.encode,
            decodeReq: c.decode,
            decodeRes: c.decode,
        });
    }
    return c;
}
var STMPEncoding = /** @class */ (function () {
    function STMPEncoding() {
    }
    STMPEncoding.register = function () {
        var e_1, _a, e_2, _b;
        var codecs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            codecs[_i] = arguments[_i];
        }
        try {
            for (var codecs_1 = __values(codecs), codecs_1_1 = codecs_1.next(); !codecs_1_1.done; codecs_1_1 = codecs_1.next()) {
                var c = codecs_1_1.value;
                var ac = normalizeCodec(c);
                try {
                    for (var _c = (e_2 = void 0, __values(c.contentType)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var t = _d.value;
                        this.codecs[t] = ac;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (codecs_1_1 && !codecs_1_1.done && (_a = codecs_1.return)) _a.call(codecs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    STMPEncoding.get = function (contentType) {
        return contentType ? this.codecs[contentType] : void 0;
    };
    STMPEncoding.codecs = {};
    return STMPEncoding;
}());
export { STMPEncoding };
STMPEncoding.register(jsonCodec);
//# sourceMappingURL=STMPEncoding.js.map