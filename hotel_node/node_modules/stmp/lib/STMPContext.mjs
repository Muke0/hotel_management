/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-29 16:49:10
 *
 * TODO
 */
import { createResponseMessage, HTTP_OK, isPayload, isRequestMessage, } from './messages';
import { STMPEncoding } from './STMPEncoding';
var STMPContext = /** @class */ (function () {
    function STMPContext(message, instance) {
        this.instance = instance;
        this.incoming = message;
        this.outgoing = createResponseMessage(message.messageId, 0, '');
    }
    STMPContext.prototype.isFinished = function () {
        return this.outgoing.status > 0;
    };
    STMPContext.prototype.get = function (key) {
        var _a;
        return _a = this.incoming.headers[key], (_a !== null && _a !== void 0 ? _a : this.instance.headers[key]);
    };
    STMPContext.prototype.sget = function (key) {
        var _a;
        return _a = this.outgoing.headers[key], (_a !== null && _a !== void 0 ? _a : this.instance.headers[key]);
    };
    STMPContext.prototype.set = function (key, value) {
        key = key.toLowerCase();
        if (this.instance.headers[key] !== value) {
            this.outgoing.headers[key] = value;
        }
        return this;
    };
    STMPContext.prototype.send = function () {
        if (isRequestMessage(this.incoming)) {
            this.instance.send(this.outgoing);
        }
    };
    STMPContext.prototype.json = function (data, status) {
        if (status === void 0) { status = HTTP_OK; }
        this.output(data, status, 'application/json');
    };
    STMPContext.prototype.text = function (text, status) {
        if (status === void 0) { status = HTTP_OK; }
        this.output(text, status, 'text/plain');
    };
    STMPContext.prototype.raw = function (text, status) {
        if (status === void 0) { status = HTTP_OK; }
        this.output(text, status, 'application/octet-stream');
    };
    STMPContext.prototype.output = function (payload, status, contentType) {
        if (status === void 0) { status = HTTP_OK; }
        contentType = (contentType !== null && contentType !== void 0 ? contentType : this.sget('content-type'));
        if (!isPayload(payload)) {
            var codec = STMPEncoding.get(contentType);
            if (!codec) {
                throw new TypeError("cannot find codec for content type \"" + contentType + "\"");
            }
            payload = codec.encodeRes(payload, this);
        }
        this.set('content-type', contentType);
        this.outgoing.payload = payload;
        this.outgoing.status = status;
        this.send();
    };
    return STMPContext;
}());
export { STMPContext };
//# sourceMappingURL=STMPContext.js.map