/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-27 18:29:39
 */
import { __awaiter, __generator } from "tslib";
import { parse } from 'monofile-utilities/lib/query-string';
import URL from 'url';
import { createCloseMessage, createPingMessage, createPushMessage, Headers, HTTP_INTERNAL_SERVER_ERROR, HTTP_OK, isCloseMessage, isPingMessage, isResponseMessage, WS_NORMAL_CLOSURE, } from './messages';
import { normalizeSendOptions } from './utils';
var STMPConnection = /** @class */ (function () {
    function STMPConnection(server, socket) {
        this.server = server;
        this.socket = socket;
        this.groups = new Set();
        this.handshakeStatus = 0;
        this.closeStatus = 0;
        this.closeMessage = '';
        this.url = '';
        this.headers = Headers();
        this.pathname = '';
        this.search = '';
        this.query = Headers();
        this.nextId = 0;
    }
    STMPConnection.prototype.init = function (url, headers) {
        var _a;
        this.url = url;
        headers['content-type'] = (_a = headers['content-type'], (_a !== null && _a !== void 0 ? _a : this.server.defaultContentType));
        this.headers = headers;
        var parsedUrl = URL.parse(url);
        this.pathname = parsedUrl.pathname || '';
        this.search = parsedUrl.search || '';
        this.query = parse(parsedUrl.query || '');
    };
    STMPConnection.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.server.authenticate(this)];
                    case 1:
                        _a.sent();
                        this.handshake(HTTP_OK, 'OK');
                        if (this.handshakeStatus < 300) {
                            this.server.emit('connection', this);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        this.handshake(HTTP_INTERNAL_SERVER_ERROR, 'Internal Server Error');
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    STMPConnection.prototype.destroy = function (status, message) {
        var _this = this;
        var _a;
        this.closeStatus = status;
        this.closeMessage = message;
        this.server.connections.delete(this);
        (_a = this.groups) === null || _a === void 0 ? void 0 : _a.forEach(function (groupId) { return _this.leaveGroup(groupId); });
        this.terminate();
    };
    STMPConnection.prototype.processMessage = function (message) {
        if (isCloseMessage(message)) {
            this.destroy(message.status, message.message);
        }
        else if (isPingMessage(message)) {
            this.send(createPingMessage(message.messageId));
        }
        else if (isResponseMessage(message)) {
            // TODO: allow server request
        }
        else {
            this.server.processMessage(this, message);
        }
    };
    STMPConnection.prototype.close = function (status, message) {
        if (status === void 0) { status = WS_NORMAL_CLOSURE; }
        if (message === void 0) { message = 'Normal Closure'; }
        if (this.closeStatus > 0 || status < 1000) {
            return;
        }
        this.send(createCloseMessage(status, message));
        this.destroy(status, message);
    };
    STMPConnection.prototype.joinGroup = function (groupId) {
        this.groups.add(groupId);
        var group = this.server.groups.get(groupId);
        if (group) {
            group.add(this);
        }
        else {
            this.server.groups.set(groupId, new Set([this]));
        }
    };
    STMPConnection.prototype.leaveGroup = function (groupId) {
        var _a;
        this.groups.delete(groupId);
        (_a = this.server.groups.get(groupId)) === null || _a === void 0 ? void 0 : _a.delete(this);
    };
    STMPConnection.prototype.handshake = function (status, message) {
        if (status === void 0) { status = HTTP_OK; }
        if (message === void 0) { message = 'OK'; }
        if (this.handshakeStatus > 0 || status < 100) {
            return;
        }
        this.handshakeStatus = status;
        this.sendHandshake(status, message);
    };
    STMPConnection.prototype.messageId = function () {
        return (this.nextId = (this.nextId + 1) & 0xffff);
    };
    STMPConnection.prototype.push = function (a, b, c) {
        var options = normalizeSendOptions(a, b, c, this.headers);
        this.send(createPushMessage(this.messageId(), options.action, options.payload, options.headers));
    };
    return STMPConnection;
}());
export { STMPConnection };
//# sourceMappingURL=STMPConnection.js.map