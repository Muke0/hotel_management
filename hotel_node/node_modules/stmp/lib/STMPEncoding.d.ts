/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-12-18 11:38:40
 */
import { ArbitraryCodec, CodecBase } from './codec/arbitrary';
import { Payload } from './messages';
import { STMPContext } from './STMPContext';
import { STMPResponse } from './STMPResponse';
import { STMPSendOptions } from './types';
export interface STMPCodec extends CodecBase {
    encodeReq<Q>(data: Q, options: STMPSendOptions<Q>): Payload;
    encodeRes<S, Q>(data: S, ctx: STMPContext<Q, S>): Payload;
    decodeReq<Q>(payload: NonNullable<Payload>, ctx: STMPContext<Q>): Q;
    decodeRes<S, Q>(payload: NonNullable<Payload>, res: STMPResponse<S, Q>): S;
}
export declare class STMPEncoding {
    static codecs: Record<string, STMPCodec>;
    static register(...codecs: Array<STMPCodec | ArbitraryCodec>): void;
    static get(contentType: string | undefined): STMPCodec | undefined;
}
