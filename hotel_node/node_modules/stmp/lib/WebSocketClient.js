"use strict";
/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-11-27 17:01:54
 */
Object.defineProperty(exports, "__esModule", { value: true });
const query_string_1 = require("monofile-utilities/lib/query-string");
const util_1 = require("util");
const messages_1 = require("./messages");
const protocol_1 = require("./protocol");
const STMPClient_1 = require("./STMPClient");
const types_1 = require("./types");
const debug = util_1.debuglog('stmp:WebSocketClient');
class WebSocketClient extends STMPClient_1.STMPClient {
    constructor(url, headers = messages_1.Headers(), options) {
        super(headers, options);
        this.url = url;
    }
    terminate() {
        this.ws.onmessage = this.ws.onclose = this.ws.onerror = null;
    }
    connect(remainCount = this.maxRetryCount, previousStatus = null, previousMessage = null) {
        if (this.readyState !== 'closed') {
            return Promise.reject(new Error(`cannot connect with readyState: ${this.readyState}`));
        }
        this.readyState = 'connecting';
        this.emit('connecting', {
            remainCount,
            retryCount: this.maxRetryCount - remainCount,
            previousStatus,
            previousMessage,
        });
        let timeoutHandler;
        return new Promise((resolve, reject) => {
            const ws = (this.ws = new WebSocketClient.WebSocket(query_string_1.appendQuery(this.url, {
                __stmp_headers__: this.headers,
            })));
            timeoutHandler = setTimeout(() => reject(new Error('connect timeout')), this.handshakeTimeout);
            ws.onmessage = (ev) => {
                if (typeof ev.data === 'string') {
                    const newLine = ev.data.indexOf('\n');
                    const status = +ev.data.substr(0, newLine > -1 ? newLine : void 0);
                    const message = newLine > -1 ? ev.data.substr(newLine + 1) : '';
                    debug('handshake response [%s]: %s.', status, message);
                    if (status > 299) {
                        reject({ status, message });
                    }
                    else {
                        clearTimeout(timeoutHandler);
                        this.readyState = 'connected';
                        this.emit('connected', { status, message });
                        this.ws.onmessage = (ev) => {
                            const message = protocol_1.parseText(ev.data);
                            debug('received raw message: %s: %O.', ev.data, message);
                            if (!message) {
                                this.close(messages_1.WS_PROTOCOL_ERROR, 'Invalid Message');
                            }
                            else {
                                this.processMessage(message);
                            }
                        };
                        this.ws.onerror = (event) => {
                            this.emit('error', types_1.newError(types_1.STMPSource.TRANSPORT_ERROR, { event }));
                        };
                        this.ws.onclose = (ev) => {
                            this.close(ev.code, ev.reason);
                        };
                        resolve([status, message]);
                    }
                }
                else {
                    reject(ev);
                }
            };
            ws.onclose = ws.onerror = reject;
        }).catch((reason) => {
            var _a, _b;
            clearTimeout(timeoutHandler);
            this.readyState = 'closed';
            this.ws.onmessage = this.ws.onerror = this.ws.onclose = null;
            if (remainCount > 0) {
                return this.connect(remainCount - 1, (_a = reason) === null || _a === void 0 ? void 0 : _a.status, (_b = reason) === null || _b === void 0 ? void 0 : _b.message);
            }
            else {
                return Promise.reject(reason);
            }
        });
    }
    send(message) {
        if (messages_1.isCloseMessage(message)) {
            if (this.ws.readyState === this.ws.OPEN) {
                this.ws.close(message.status >= messages_1.WS_USER_MIN ? message.status : messages_1.WS_NORMAL_CLOSURE, message.message);
            }
        }
        else {
            this.ws.send(protocol_1.stringifyText(message));
        }
    }
}
exports.WebSocketClient = WebSocketClient;
WebSocketClient.WebSocket = WebSocket;
//# sourceMappingURL=WebSocketClient.js.map